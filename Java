
-------------------------Java----------------------------------------
*Java is a programming language and a platform. Java is a high level, robust, object-oriented and secure programming language.
*Since Java has a runtime environment (JRE) and API, it is called a platform.
*Java SE 17 is long term support version.

----------There are mainly 4 types of applications that can be created using Java programming:----------------

1) Standalone Application
Standalone applications are also known as desktop applications or window-based applications.

2) Web Application
An application that runs on the server side and creates a dynamic page is called a web application.

3) Enterprise Application
An application that is distributed in nature, such as banking applications, etc. is called an enterprise application.

4) Mobile Application
An application which is created for mobile devices is called a mobile application. Currently, Android and Java ME are used for creating mobile applications.

--------Java Platforms / Editions-----------

1) Java SE (Java Standard Edition)--Desktop application
2) Java EE (Java Enterprise Edition)--Ex Banking applications
3) Java ME (Java Micro Edition)---to build mobile applicaitions
4) JavaFX--It is used to develop rich internet applications. It uses a lightweight user interface API

---About Java----------------
* Java was developed by James Gosling, who is known as the father of Java, in 1995.
* Java is "Simple, Robust, Portable, Platform-independent, Secured, High Performance, Multithreaded, Architecture Neutral, Object-Oriented, Interpreted, and Dynamic".
*Java SE 17 (September 2021)

-----------JVM & JRE & JDK-------------------
*JVM--The JVM performs the following main tasks: Loads code,Verifies code, Executes code, Provides runtime environment.
*JRE--It physically exists. It contains a set of libraries + other files that JVM uses at runtime.
*JDK--The JDK contains a private Java Virtual Machine (JVM), JRE and a few other resources such as an interpreter/loader (java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), etc.
*javac compiles java code and provide .class file(byte code) and this byte code was run by JVM.

---------Java Vs C++-------------------------
*No explicit pointers, operator overloading, etc.
*Automatic Garbage Collection in Java.	
*C++ is mainly used for system programming.
*Java is mainly used for application programming.
*C++ supports the goto statement.Java not
C++ supports multiple inheritance.Java not through class but through interface
*C++ uses compiler only, which converts source code into machine code so, C++ is platform dependent.
*Java uses both compiler and interpreter.
*Java source code is converted into bytecode at compilation time. The interpreter executes this bytecode at runtime and produces output.
*Java doesn't support structures and unions.


-----------Steps to execute the code in Java-------------------
*Classloader: It is the subsystem of JVM that is used to load class files.
*Bytecode Verifier: Checks the code fragments for illegal code that can violate access rights to objects.
*Interpreter: Read bytecode stream then execute the instructions.

---------------Concepts---------------------------
*The main() method is executed by the JVM, so it doesn't require creating an object to invoke the main() method. So, it saves memory.
*Static, the core advantage of the static method is that there is no need to create an object to invoke the static method.
*String args[]--- command line argument.
*System(Class).out(Object of PrintStream class).println(method of PrintStream class)
*To compile: javac Simple.java
*To execute: java Simple
*// \u000d System.out.println("Java comment is executed!!"); --to execute commented line in java


------------------------Class vs Object----------------

*Object--An entity that has state and behavior is known as an object e.g., chair, bike, marker, pen, table, car, etc.

*Class--A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can't be physical.


-------Variables------------------------
*Local Variable--A variable declared inside the body of the method is called local variable.
*Instance Variable-A variable declared inside the class but outside the body of the method, is called an instance variable.
*Static--A variable that is declared as static is called a static variable. It cannot be local. 
You can create a single copy of the static variable and share it among all the instances of the class. 
Memory allocation for static variables happens only once when the class is loaded in the memory.

-------------Data Types---------------------
*Primitive data types: The primitive data types include boolean, character, integer(byte, short, int, long), float(float, double).
*we can do char increament/decrement char a='a'; a++/a--
*float f = 6.9f; double d= 5.90
*long l = 12345l;
*int i = 10_00_000;
*double e = 12e10; //12*10 power 10
*byte b = 129; //error because integer cannot goes to byte
*Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.

------------Operators----------------------------
*There are many types of operators in Java which are given below:

1.Unary Operator---  postfix  expr++ expr--    prefix  ++expr --expr +expr -expr ~ !
2.Arithmetic Operator----* / % + -
3.Shift Operator-- << >> >>>
4.Relational Operator-- < > <= >= instanceof  == !=
5.Bitwise Operator--&  Exclusive OR^   Inclusive OR|
6.Logical Operator-- && || 
7.Ternary Operator-- ? :
8.Assignment Operator--  = += -= *= /= %= &= ^= |= <<= >>= >>>=

-----------------Keywords------------------
*abstract: Java abstract keyword is used to declare an abstract class. An abstract class can provide the implementation of the interface. It can have abstract and non-abstract methods.
*final: Java final keyword is used to indicate that a variable holds a constant value. It is used with a variable. It is used to restrict the user from updating the value of the variable.
*finally: Whether Exception occured or not this block is executed. It is followed by try or catch block.
*implements: Java implements keyword is used to implement an interface.
*interface: Java interface keyword is used to declare an interface. It can have only abstract methods.

-----------For Each Loop----------
*Java provides an enhanced for loop to traverse the data structures like array or collection.
for(data_type var : array_name/collection_name){    
//statements    
}    

*Labelled For Loop:
 aa:  
        for(int i=1;i<=3;i++){  
            bb:  
                for(int j=1;j<=3;j++){  
                    if(i==2&&j==2){  
                        break aa;  
                    }  
                    System.out.println(i+" "+j);  
                }  
        }  

----------------Constructors in Java------------------
*Every time an object is created using the new() keyword, at least one constructor is called.
*If there is no constructor available in the class. In such case, Java compiler provides a default constructor by default.

**There are two rules defined for the constructor.
-Constructor name must be the same as its class name
-A Constructor must have no explicit return type
-A Java constructor cannot be abstract, static, final, and synchronized
-we can have private, protected, public or default constructor in Java.

*The default constructor is used to provide the default values to the object like 0, null, etc., depending on the type.
*A constructor which has a specific number of parameters is called a parameterized constructor.
*Constructor overloading in Java is a technique of having more than one constructor with different parameter lists


--------------Strings & Type conversion------------------------------
*The java.lang.String class implements Serializable, Comparable and CharSequence interfaces
*The Java String is immutable which means it cannot be changed. 
*String objects are stored in a special memory area known as the "string constant pool"(Heap memory).
*Once String object is created its data or state can't be changed but a new String object is created.
*Suppose there are 5 reference variables, all refer to one object "Sachin". If one reference variable changes the value of the object, it will be affected by all the reference variables. That is why String objects are immutable in Java.
*The == operator compares references not values.
*String s=new String("Hemanth")--here create 2 objects, 1 in non-pool heap section and "Hemanth" in string constant pool. s referes to non-pool section.

**compareTo() method(s1.compareTo(s2))
$compares values lexicographically and returns an integer.
$s1 == s2 : The method returns 0.
$s1 > s2 : The method returns a positive value.
$s1 < s2 : The method returns a negative value.

**concatination
* After a string literal, all the + will be treated as string concatenation operator.--String s=50+30+"Sachin"+40+40; --80Sachin4040
*'+', s1.concat(s2), String.format("%s%s%s",s1,s2,s3), String.join("",s1,s2);-any symbol first argument, StringJoiner

**Substring in Java
$ substring(int startIndex):
$substring(int startIndex, int endIndex):--startIndex: inclusive endIndex: exclusive

*The String class trim() method eliminates white spaces before and after the String.

*intern()---method check the string object present in SCP or not. It is usefull when u create String object using new keyword.

*String.valueOf()-- method coverts given type such as int, long, float, double, boolean, char and char array into String.

*Integer.toString()--to convert integer to String

*Long.parseLong()-- to convert String to Long

*Integer.parseInt(String) or Integer.ValueOf(String)-- to convert to String to integer.

*char[] ch=s1.toCharArray(); --String to Char array

*Double(to).valueOf(from)   


*Float f= new Float(124f)
*f.intValue();  --converted to integer type ,to convert any data type from higher to lower data 

*We cannot convert higher data type to lower data type implicity but can explicly

*char c='1';  
int a=Character.getNumericValue(c); #a=1;

*the ASCII character of integer value will be stored in the char variable or vice versa.


-----------------Date & TimeStamp----------------------------------------
*String to Date -- Date date1=new SimpleDateFormat("dd/MM/yyyy").parse(sDate1); 
                Date date = new Date();  
                Timestamp ts=new Timestamp(date.getTime());  
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
                System.out.println(formatter.format(ts));  

----------------String Buffer---------------------------------
*Java StringBuffer class is used to create mutable (modifiable) String objects.

*StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. So it is safe and will result in an order.

*StringBuffer()----It creates an empty String buffer with the initial capacity of 16.
*StringBuffer(String string)--It creates a String buffer with the specified string..
*StringBuffer(int capacity)---It creates an empty String buffer with the specified capacity as length.

*The append() method concatenates the given argument with this String.

*The insert() method inserts the given String with this string at the given position.

*ensureCapacity()--ensure that certain capacity to be used.

*The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. 

* All the wrapper classes and String class is immutable. 

-----------String Vs String Buffer-------------------
*The String class is immutable.
*The StringBuffer class is mutable.
*String is slow and consumes more memory when we concatenate too many strings because every time it creates new instance.
*StringBuffer is fast and consumes less memory when we concatenate t strings.
*String class uses String constant pool.
*StringBuffer uses Heap memory.

---------StringBuffer Vs StringBuilder---------------
*StringBuffer is synchronized i.e. thread safe. It means two threads can't call the methods of StringBuffer simultaneously.
*StringBuilder is non-synchronized i.e. not thread safe. It means two threads can call the methods of StringBuilder simultaneously.
*StringBuffer is less efficient than StringBuilder.
*StringBuilder is more efficient than StringBuffer.




-------------Basic concepts of OOPs are:---------------------

*Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects.

**************Inheritance
{
$Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.
$For Method Overriding (so runtime polymorphism can be achieved).
$For Code Reusability.
$Java Class Supports single, multilevel and hierarchical inheritence.
$multiple and hybrid inheritance is supported through interface only
*********Aggregation
$If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship.
$Code reuse is also best achieved by aggregation when there is no is-a relationship.
$Inheritance should be used only if the relationship is-a is maintained throughout the lifetime of the objects involved; otherwise, aggregation is the best choice.
}

****************Polymorphism

$Method Overloading-If a class has multiple methods having same name but different in parameters, it is known as Method Overloading. Method overloading is the example of compile time polymorphism.
$Method Overriding-If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding. Method overriding is the example of run time polymorphism.
$Super - We can use super keyword to access the data member or field of parent class. It is used if parent class and child class have same fields.

**Instance initializer block
$Instance Initializer block is used to initialize the instance data member. It run each time when object of the class is created.
$The instance initializer block is created when instance of the class is created.
$The instance initializer block is invoked after the parent class constructor is invoked (i.e. after super() constructor call).
$The instance initializer block comes in the order in which they appear.
$The java compiler copies the code of instance initializer block in every constructor.

**Final
$If you make any variable as final, you cannot change the value of final variable(It will be constant).
$If you make any method as final, you cannot override it.
$If you make any class as final, you cannot extend it.
$blank final variable is intialized in constructor only.
$ static blank final variable can be initialized only in static block.
$Q) Can we declare a constructor final?
No, because constructor is never inherited.

**Polymorphism in Java
$Polymorphism in Java is a concept by which we can perform a single action in different ways.
$Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time.
$Since method invocation is determined by the JVM not compiler, it is known as runtime polymorphism.
$Runtime polymorphism can't be achieved by data members.

*****Binding
$Connecting a method call to the method body is known as binding.
**Static Binding
*When type of the object is determined at compiled time(by the compiler), it is known as static binding.
*if private, final or static method in a class, there is static binding.
**Dynamic Binding
When type of the object is determined at run-time, it is known as dynamic binding.

**Java instanceof
$The java instanceof operator is used to test whether the object is an instance of the specified type (class or subclass or interface).
Simple1 s=new Simple1();  
System.out.println(s instanceof Simple1);

****Upcasting & Downcasting
$Upcasting-If the reference variable of Parent class refers to the object of Child class, it is known as upcasting.
$Downcasting-When Subclass type refers to the object of Parent class, it is known as downcasting.



********************Abstraction
$Abstraction is a process of hiding the implementation details and showing only functionality to the user.

$There are two ways to achieve abstraction in java
1.Abstract class (0 to 100%)
2.Interface (100%)

$An abstract class must be declared with an abstract keyword.
1.It can have abstract and non-abstract methods.
2.It cannot be instantiated.
3.It can have constructors and static methods also.
4.It can have final methods which will force the subclass not to change the body of the method.
5.If there is an abstract method in a class, that class must be abstract.

$The abstract class can also be used to provide some implementation of the interface. In such case, the end user may not be forced to override all the methods of the interface.

*****Interface in Java
$An interface in Java is a blueprint of a class. It has static, final, public constants and abstract methods.
$It cannot be instantiated just like the abstract class.
$we can have default(to add new functionalities) and static methods in an interface from Java JDK 8, static methods cannot inherited
$From Java 9 we can have private methods & private static methods in an interface.

Reason for Interface:
It is used to achieve abstraction.
By interface, we can support the functionality of multiple inheritance.
It can be used to achieve loose coupling.

$The Java compiler adds public and abstract keywords before the interface method.
$adds public, static and final keywords before data members.
$class A7 implements Printable,Showable---multiple inheritance
$A class implements an interface, but one interface extends another interface.

$Since Java 8, we can have method body in interface. But we need to make it default method
default void msg(){System.out.println("default method");

$Since Java 8, we can have static method in interface---static int cube(int x){return x*x*x;}

$An interface which has no member is known as a marker or tagged interface--public interface Serializable{  }  

$An interface can have another interface which is known as a nested interface.

****************Encapsulation

***Package 
$A java package is a group of similar types of classes, interfaces and sub-packages.
$Package in java can be categorized in two form, built-in package and user-defined package.
$There are many built-in packages such as java, lang, awt, javax, swing, net, io, util, sql etc.

$There are three ways to access the package from outside the package.
1.import package.*;-- then all the classes and interfaces of this package will be accessible but not subpackages.
2import package.classname;--then only declared class of this package will be accessible.
3.fully qualified name.--If you use fully qualified name then only declared class of this package will be accessible. Now there is no need to import.
*pack.A obj = new pack.A();

$The standard of defining package is domain.company.package e.g. com.javatpoint.bean or org.sssit.dao.

*e:\sources> javac -d c:\classes Simple.java--Syntax to change .class file directory
*e:\sources> set classpath=c:\classes;.;---to set classpath
*e:\sources> java -classpath c:\classes mypack.Simple

Note :There can be only one public class in a java source file and it must be saved by the public class name.


*****Access Modifiers in Java

**access modifiers 
$Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
$Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.
$Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.
$Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package.

**non-access modifiers---static, abstract, synchronized, native, volatile, transient, etc.

$If you make any class constructor private, you cannot create the instance of that class from outside the class.

*Note: 
$A class cannot be private or protected except nested class.
$If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.


****Encapsulation in Java
$Encapsulation in Java --is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.
$We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use setter and getter methods to set and get the data in it.

**Object class in Java
$The Object class is the parent class of all the classes in java by default. In other words, it is the topmost class of java.
$there is getObject() method that returns an object but it can be of any type like Employee,Student etc, we can use Object class reference to refer that object. For example:
Object obj=getObject();


**Object Cloning in Java
$The object cloning is a way to create exact copy of an object. The clone() method of Object class is used to clone an object.
$The java.lang.Cloneable interface must be implemented by the class whose object clone we want to create. If we don't implement Cloneable interface, clone() method generates CloneNotSupportedException.

**Java Math class
$Java Math class provides several methods to work on math calculations like Math.min(), max(), avg(), sin(), cos(), tan(), round(), ceil(), floor(), abs() etc.

***Wrapper classes in Java
$The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive.
$Autoboxing--compiler converts primitive to wrapper object implicitly.
$unboxing--compiler converts wrapper object to primitive data type implicitly.

***Call by Value and Call by Reference in Java
*Call by Value--There is only call by value in java, not call by reference. If we call a method passing a value, it is known as call by value. The changes being done in the called method, is not affected in the calling method.

***Java Strictfp Keyword
$Java strictfp keyword ensures that you will get the same result on every platform if you perform operations in the floating-point variable.
$The strictfp keyword can be applied on methods, classes and interfaces.
$The strictfp keyword cannot be applied on abstract methods, variables or constructors.

***Java Command Line Arguments
$The java command-line argument is an argument i.e. passed at the time of running the java program.--args[i]



**********************Collections in Java**********************
*Iterate is a root of collection Framework
*A Collection represents a single unit of objects
*The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.
*Java collection framework was non-generic before JDK 1.5. Since 1.5, it is generic.--only one type
*Set, List, Queue, Deque-----Interfaces
*ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet--Classes

*Set Interface Implemented by Hashset & Linked Hashset Clases & Sortedset(Interface)--->Treeset(Class)

*List Interface implemented by ArrayList, LinkedList, Vector & Stack

*Queue Interface implemented by Priority Queue, Deque(Interface), ArrayDeque

**What is a framework in Java
It provides readymade architecture.
It represents a set of classes and interfaces.
It is optional.


**Iterator Interface
$Iterator interface provides the facility of iterating the elements in a forward direction only.

$Methods--hasNext(), next(), remove(). 

*******List Inteface(Ordered, allows duplicate objects)
$List <data-type> list1= new ArrayList(); 

**Array List
$ It uses a dynamic array to store the duplicate element of different data types. 
$ The ArrayList class maintains the insertion order and is non-synchronized. 
$ArrayList<String> list=new ArrayList<String>()
$Arrays.asList(array)
$Listname.toArray(new String[list.size()])

$Length keyword is used to find number of characters & Strings in String & Array
$Size keyword is used to find number of Strings in arraylist

**LinkedList
$It uses a doubly linked list internally to store the elements. 
$It can store the duplicate elements. It maintains the insertion order and is not synchronized. 
$In LinkedList, the manipulation is fast because no shifting is required.
$LinkedList<String> al=new LinkedList<String>(); 
$removeFirstOccurrence(), removeLastOccurrence(), removeFirst(), removeLast(), addFirst(), addLast(), descendingIterator()

**Vector
$It is similar to ArrayList. However, It is synchronized.
$Vector<String> v=new Vector<String>();  

**Stack
$The stack is the subclass of Vector.
$It implements the last-in-first-out data structure, i.e., Stack.
$The stack contains all of the methods of Vector class
$Stack<String> stack = new Stack<String>();

**Usefull Methods
$ Set(), Get(), Collection.sort(), addall("Index","String"), add(), clear(), removeif()--array.removeIf(name -> name.charAt(0)=='h');, ListIterator(itr.hasPrevious, itr.Previous)--forward & backward iterator
$retainAll() is used to retain common elements from both the objects,  isEmpty()

********Queue Interface(Ordered, allows duplicate objects)
$Queue interface maintains the first-in-first-out order. It can be defined as an ordered list 

**Priority Queue
$It holds the elements or objects which are to be processed by their priorities. 
$PriorityQueue doesn't allow null values to be stored in the queue.
$PriorityQueue<String> queue=new PriorityQueue<String>(); 
$poll--remove element from Queue, peek is used to print head of the queue

**Dequeue
$Deque interface extends the Queue interface. 
$In Deque, we can remove and add the elements from both the side. 
$Deque stands for a double-ended queue which enables us to perform the operations at both the ends. 
$Deque d = new ArrayDeque(); 

**ArrayDequeue
$ArrayDeque class implements the Deque interface.
$It facilitates us to use the Deque. Unlike queue, we can add or delete the elements from both the ends.
$ArrayDeque is faster than ArrayList and Stack and has no capacity restrictions.
$Null elements are not allowed in the ArrayDeque.
$Deque<String> deque = new ArrayDeque<String>(); 


**************SET Interface***********************
$It represents the unordered set of elements which doesn't allow us to store the duplicate items.
$ We can store at most one null value in Set. Set is implemented by HashSet, LinkedHashSet, and TreeSet.

**Hashset
$It represents the collection that uses a hash table for storage. 
$Hashing is used to store the elements in the HashSet. It contains unique items.
$HashSet<String> set=new HashSet<String>();  

**Linked Hashset
$LinkedHashSet class represents the LinkedList implementation of Set Interface. 
$It extends the HashSet class and implements Set interface. 
$Like HashSet, It also contains unique elements. It maintains the insertion order and permits null elements.
$LinkedHashSet<String> set=new LinkedHashSet<String>(); 

*****SortedSet Interface
$SortedSet is the alternate of Set interface that provides a total ordering on its elements. 
$The elements of the SortedSet are arranged in the increasing (ascending) order.
$The SortedSet provides the additional methods that inhibit the natural ordering of the elements.
$SortedSet<data-type> set = new TreeSet(); 

**TreeSet
$Like HashSet, TreeSet also contains unique elements. 
$However, the access and retrieval time of TreeSet is quite fast. The elements in TreeSet stored in ascending order.
$It doesnt allow null values.
$TreeSet<String> set=new TreeSet<String>()
$methods--pollFirst()--highest values, pollLast()--lowest value, headSet("C"(inclusive), true), SubSet("C", true, "E", false), tailSet("C", true), descendingSet()

*******Java Map Interface**********
$A map contains values on the basis of key, i.e. key and value pair.
$Each key and value pair is known as an entry. A Map contains unique keys. Can have duplicate Values
$Map & sorted map are interfaces
$HashMap, LinkedHashMap, TreeMap
$if you try to store duplicate key with another value, it will replace the value.
$A Map can't be traversed, so you need to convert it into Set using keySet() have only keys, keyValues() have only values,entrySet() have both keys & Values method.
$Set set=map.entrySet()---Map.Entry m : map.entrySet()--map to set conversion using entryset which have both key & value.
$map.keySet()-returns all keys, map.values()- returns all values, map.entrySet() returns all keys & values.

**HashMap***
$Java HashMap contains values based on the key.
$Java HashMap contains only unique keys.
$Java HashMap may have one null key and multiple null values.
$Java HashMap is non synchronized.
$Java HashMap maintains no order.
$The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.
$replace(), putifAbsent(), putAll(), replaceAll((k,v)->"Hemanth")


**LinkedHashMap**
$As same as Hashmap, but it maintains insertion order.

**TreeMap**
$As Same as Hashmap, but it has no null keys and it has increasing order.

**Hashtable**
$It inherits dictionary class.
$It doesnt have both null keys and values
$It is synchronised
$getOrDefault(101, "Not Found"), .putIfAbsent(104,"Gaurav");

**Java EnumSet class**
$Java EnumSet class is the specialized Set implementation for use with enum types.

enum days {  
  SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY  
}  

$Set<days> set = EnumSet.of(days.TUESDAY, days.WEDNESDAY), Set<days> set1 = EnumSet.allOf(days.class), Set<days> set2 = EnumSet.noneOf(days.class);  

**Java EnumMap class**
$Java EnumMap class is the specialized Map implementation for enum keys. It inherits Enum and AbstractMap classes.

*****Properties class in Java*****
$The properties object contains key and value pair both as a string. 
$The java.util.Properties class is the subclass of Hashtable.
$It can be used to get property value based on the property key.
$The Properties class provides methods to get data from the properties file and store data into the properties file.
$Moreover, it can be used to get the properties of a system.
$If any information is changed from the properties file, you don't need to recompile the java class. 
$It is used to store information which is to be changed frequently.

$FileReader reader=new FileReader("db.properties");  
$Properties p=new Properties();
$load(), getProperty()

****Java JDBC Driver ***
$JDBC stands for Java Database Connectivity. 
$JDBC is a Java API to connect and execute the query with the database. 
$It is a part of JavaSE (Java Standard Edition). 
$JDBC API uses JDBC drivers to connect with the database.
 
There are four types of JDBC drivers:
$JDBC-ODBC Bridge Driver,
$Native Driver,
$Network Protocol Driver, and
$Thin Driver



	



